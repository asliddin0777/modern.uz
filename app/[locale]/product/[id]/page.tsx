"use client";
import React, { cache, memo, useEffect, useRef, useState } from "react";
import Head from "next/head";
import Categories from "../../components/global/Categories";
import styles from "@/styles/detail.module.css";
import Image from "next/image";
import Order from "../../components/global/Order";
import Link from "next/link"
import axios from "axios";
import Loader from "../../components/local/Loader";
import useCookies from "react-cookie/cjs/useCookies";
import socket from "../../components/local/socket";
import IProduct from "@/interfaces/Product/IProduct";
import StorageButton from "../../components/local/StorageButton";
import ChatWithVendor from "../../components/local/ChatWithVendor";
import IChat from "@/interfaces/IChat";
import Success from "../../components/local/Success";
import Error from "../../components/local/Error";
import { useRouter } from "next/navigation";
const Detail = ({
  searchParams,
}: {
  searchParams: {
    id: string;
  };
}) => {

  const [chat, setChat] = useState<IChat>()
  const { push } = useRouter()
  const [controllerC, setControllerC] = useState<number>(0);
  const [controllerM, setControllerM] = useState<number>(0);
  const [order, setOrder] = useState<boolean>(false);
  const [load, setLoad] = useState<boolean>(true);
  const [selectedImage, setSelectedImage] = useState<string>("");
  const [textLength, setTextLength] = useState<number>(1000);
  const [data, setData] = useState<IProduct>();
  const [props, setProps] = useState<any | any[]>([]);
  const [addedToCart, setAddedToCart] = useState<boolean>(false);
  const [succed, setSucced] = useState<boolean>(false);
  const [msg, setMsg] = useState<string>("");
  const [selectedMemory, setSelectedMemory] = useState<string>("");
  const [categories, setCategories] = useState<any[] | any>([]);
  const [subCategories, setSubCategories] = useState<any[] | any>([]);
  const [fromWhere, setFromWhere] = useState<number>(1);
  const [cookie] = useCookies(["userInfo"]);
  const [error, setErr] = useState<boolean>(false)
  const { userInfo } = cookie;
  useEffect(() => {
    order !== true
      ? (document.body.style.overflow = "auto")
      : (document.body.style.overflow = "hidden");
  }, [order]);
  useEffect(() => {
    const fetchData = cache(async () => {
      try {
        const req1 = await axios.get<IProduct>(
          `${process.env.NEXT_PUBLIC_API}/api/products/${searchParams.id}`
        );
        const req2 = await axios.get(
          `${process.env.NEXT_PUBLIC_API}/api/props`
        );
        const req3 = await axios.get(
          `${process.env.NEXT_PUBLIC_API}/api/categories`
        );
        const req4 = await axios.get(
          `${process.env.NEXT_PUBLIC_API}/api/subcategories`
        );
        const [res1, res2, res3, res4] = await axios.all([
          req1,
          req2,
          req3,
          req4,
        ]);
        setData(req1.data);
        setProps(res2.data);
        setCategories(res3.data);
        setSubCategories(res4.data);
      } finally {
        setLoad(false);
      }
    })
    fetchData();
  }, []);
  const videoRef = useRef<HTMLVideoElement | any>();

  const [like, setLike] = useState(data?.likes?.find((id) => id === userInfo?.userId) ? true : false)
  if (!load && data) {
    const selectedProduct: IProduct = data
    return (
      <>
        <Head>
          <title>{selectedProduct?.name} - Page</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
          <link
            rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css"
          />
        </Head>
        <main className={styles.detail}>
          <Categories categories={categories} subcategories={subCategories} />
          <div className={styles.container}>
            <Success err={succed} msg={msg} setErr={setSucced} />
            <Error err={error} msg={msg} setErr={setErr} />
            <section className={styles.characteris}>
              <h3>
                {selectedProduct ? selectedProduct.name : "Apple iPhone 14"}{" "}
              </h3>
              <div className={styles.characterisInfo}>
                <div className={styles.leftSide}>
                  <button className={styles.selectedImage}>
                    <Image
                      src={
                        selectedProduct && selectedProduct?.media.length
                          ? selectedImage === ""
                            ? `${process.env.NEXT_PUBLIC_IMAGE_API}/${selectedProduct?.media[0]?.name}`
                            : `${process.env.NEXT_PUBLIC_IMAGE_API}/${selectedImage}`
                          : "/images/noImg.jpg"
                      }
                      style={{
                        borderRadius: 15,
                      }}
                      alt="iphone 14"
                      width={353}
                      height={460}
                    />
                  </button>
                  <div className={styles.imagesToSelect}>
                    {selectedProduct.media.length !== 0 ? selectedProduct.media.map((e: any) => {
                      return (
                        <div
                          key={e.id}
                          className={styles.imageToSelect}
                          style={
                            e.name === selectedImage
                              ? {
                                boxShadow:
                                  "0px 1px 17px rgba(228, 183, 23, 0.3)",
                              }
                              : {}
                          }
                          onClick={() => {
                            setSelectedImage(e.name);
                          }}
                        >
                          <Image
                            src={
                              selectedProduct
                                ? `${process.env.NEXT_PUBLIC_IMAGE_API}/${e.name}`
                                : "/images/smphone.png"
                            }
                            alt={
                              selectedProduct
                                ? selectedProduct.name
                                : "another phone image"
                            }
                            width={71}
                            height={84.5}
                          />
                        </div>
                      );
                    }) : <div
                      className={styles.imageToSelect}
                    >
                      <p>Нет изображения</p>
                    </div>}
                  </div>
                </div>

                <Order
                  deliveryTo=""
                  products={[{
                    id: selectedProduct.id as string,
                    sum: selectedProduct.price[0].price,
                    qty: 1
                  }]}
                  order={order}
                  setOrder={setOrder}
                />
                <div className={styles.characterSide}>
                  {
                    data && data?.props.map(prop => {
                      return <div className={styles.characterInfo} key={prop.id}>
                        <h4>{prop.name}</h4>
                        {prop.label === "select" ? prop.values.map((e, index) => {
                          return <StorageButton selectedMemory={selectedMemory} key={e.id} setControllerM={setControllerM} setSelectedMemory={setSelectedMemory} e={e} index={index} />
                        }) : prop.values.map(prs => {
                          return <p key={prs.id}>{prs.value === "true" ? "Да" : prs.value === "false" ? "Нет" : prs.value}</p>
                        })}
                      </div>
                    })
                  }
                </div>
                <div className={styles.costSide}>
                  <div className={styles.costTop}>
                    <div className={styles.cost}>
                      {selectedProduct &&
                        <div className={styles.costP} key={`${selectedProduct.id}${Math.random}`}>
                          <h3>{selectedProduct.price[0].price} сум</h3>
                          <h4
                            style={{
                              textDecoration: "line-through",
                            }}
                          >
                            {selectedProduct.price[0].oldPrice} сум
                          </h4>
                        </div>}
                      <div
                        className={styles.like}
                        style={{
                          cursor: "pointer",
                        }}
                        onClick={() => {
                          if (userInfo) {
                            setLike(!like)
                            axios.put<IProduct>(`${process.env.NEXT_PUBLIC_API}/api/products/like/${searchParams.id}`, {}, {
                              headers: {
                                Authorization: userInfo.userToken
                              }
                            })
                          } else {
                            push("/auth/login")
                          }
                        }}
                      >
                        {like === true ? <svg className={styles.like} width={35} height={35} viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#ff0000" strokeWidth="0.9120000000000001"><g id="SVGRepo_bgCarrier" strokeWidth="0"></g><g id="SVGRepo_tracerCarrier" strokeLinecap="round" strokeLinejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M2 9.1371C2 14 6.01943 16.5914 8.96173 18.9109C10 19.7294 11 20.5 12 20.5C13 20.5 14 19.7294 15.0383 18.9109C17.9806 16.5914 22 14 22 9.1371C22 4.27416 16.4998 0.825464 12 5.50063C7.50016 0.825464 2 4.27416 2 9.1371Z" fill="#f00"></path> </g></svg> : <svg className={styles.like} width={35} height={35} viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#ff0000" strokeWidth="0.9120000000000001"><g id="SVGRepo_bgCarrier" strokeWidth="0"></g><g id="SVGRepo_tracerCarrier" strokeLinecap="round" strokeLinejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M2 9.1371C2 14 6.01943 16.5914 8.96173 18.9109C10 19.7294 11 20.5 12 20.5C13 20.5 14 19.7294 15.0383 18.9109C17.9806 16.5914 22 14 22 9.1371C22 4.27416 16.4998 0.825464 12 5.50063C7.50016 0.825464 2 4.27416 2 9.1371Z" fill="#ffffff00"></path> </g></svg>}
                      </div>
                    </div>
                    <div className={styles.buy}>
                      <button
                        type="button"
                        onClick={() => {
                          if (userInfo) {
                            setOrder(true);
                          } else {
                            push("/auth/login")
                          }
                        }}
                      >
                        Купить
                      </button>
                      <div onClick={() => {
                        if (userInfo) {
                          axios
                            .put(
                              `${process.env.NEXT_PUBLIC_API}/api/users/basket/add/${selectedProduct.id}`,
                              {},
                              {
                                headers: {
                                  Authorization: userInfo.userToken,
                                },
                              }
                            )
                            .then((res) => {
                              setAddedToCart(!addedToCart);
                              setSucced(!succed);
                              setMsg("Added to cart");
                            })
                            .catch((err) => {
                              setErr(!error)
                              setMsg(err.response.data.errors[0].message)
                            });
                        } else {
                          push("/auth/login")
                        }
                      }} className={styles.addCart}>
                        <Image
                          src={"/icons/buyY.svg"}
                          alt="add to cart icon"
                          width={20}
                          height={20}
                        />
                      </div>
                    </div>
                  </div>
                  <div className={styles.cartBottom}>
                    <button
                      onClick={() => {
                        if (userInfo !== undefined) {
                          socket.connect()
                          socket.emit('newUser', JSON.stringify({ id: userInfo.userId, fullName: `${localStorage.getItem("userName")} ${localStorage.getItem("lastName")}` }))
                          axios.post(`${process.env.NEXT_PUBLIC_API}/api/chats/new`, {
                            admin: typeof data.author === "string" ? data.author : data.author.id,
                            product: data.id
                          }, {
                            headers: {
                              Authorization: userInfo.userToken
                            }
                          }).then(res => {
                            setChat(res.data)
                            push(`/chats/chat-with-admin?id=${res.data.id}`);
                          })
                        } else {
                          push("/auth/login")
                          setFromWhere(2);
                        }
                      }}
                      className={styles.cart}
                    >
                      <Image
                        src={"/icons/chat.svg"}
                        alt="chat icon"
                        width={43}
                        height={39}
                      />
                      Написать поставщику
                    </button>
                    <Link className={styles.cart} href={`tel: +${String(data?.vendorId?.contacts?.phoneNumber)}`}>
                      <Image
                        src={"/icons/deliver.svg"}
                        alt="deliver icon"
                        width={49}
                        height={43}
                      />
                      +{data && String(data?.vendorId?.contacts?.phoneNumber)!}
                    </Link>
                  </div>
                </div>
              </div>
            </section>
            {selectedProduct && selectedProduct.video ? (
              <section className={styles.video}>
                <div className={styles.hole}>
                  <video
                    controls
                    ref={videoRef}
                    src={`${process.env.NEXT_PUBLIC_IMAGE_API}/${selectedProduct.video.name}`}
                  />
                </div>
              </section>
            ) : null}
            <div className={styles.selectDetail}>
              <button
                className={controllerC === 0 ? styles.selected : styles.select}
                onClick={() => {
                  setControllerC(0);
                }}
              >
                Характеристики
              </button>
            </div>
            <section className={styles.detailSelected}>
              <>
                <div className={styles.info}>
                  <p
                    style={{
                      color: "#888888",
                      lineHeight: "25.6px",
                    }}
                  >
                    {selectedProduct
                      && selectedProduct.description.substring(0, textLength)}
                    {selectedProduct &&
                      selectedProduct.description.length > 1000 && (
                        <button
                          onClick={() => {
                            setTextLength(selectedProduct?.description.length);
                          }}
                          style={
                            textLength !== selectedProduct?.description.length
                              ? {
                                color: "#179AE4",
                                fontWeight: 700,
                              }
                              : {
                                display: "none",
                              }
                          }
                        >
                          [read more]
                        </button>
                      )}
                  </p>
                </div>
              </>
            </section>
          </div>
        </main>
      </>
    );
  } else {
    return <Loader />;
  }
};

export default memo(Detail);
